// Generated by CoffeeScript 1.9.1
var Level,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Level = (function(superClass) {
  extend(Level, superClass);

  function Level(options) {
    var debugDraw, gravity;
    Level.__super__.constructor.call(this, {
      x: 0,
      y: 0
    });
    this.add(this.layer3 = new Kinetic.Image({
      image: options.layer3,
      x: 0,
      y: 0,
      width: options.layer3.width,
      height: options.layer3.height
    }));
    this.add(this.layer2 = new Kinetic.Image({
      image: options.layer2,
      x: 0,
      y: 0,
      width: options.layer2.width,
      height: options.layer2.height
    }));
    this.add(this.layer1 = new Kinetic.Image({
      image: options.layer1,
      x: 0,
      y: 720 - options.layer1.height,
      width: options.layer1.width,
      height: options.layer1.height
    }));
    this.add(this.objects = new Kinetic.Group({
      x: 0,
      y: 0
    }));
    gravity = new Box2D.Common.Math.b2Vec2(0, 9.8);
    this.world = new Box2D.Dynamics.b2World(gravity, true);
    this.world.scale = 30;
    this.world.timeStep = 1 / 50;
    this.addObject(new Objects.Floor(this.world));
    this.addObject(new Objects.Slingshot(this.world, 300, 610));
    this.world.context = document.getElementById("debug").getContext("2d");
    debugDraw = new Box2D.Dynamics.b2DebugDraw;
    debugDraw.SetSprite(this.world.context);
    debugDraw.SetDrawScale(this.world.scale);
    debugDraw.SetFillAlpha(.3);
    debugDraw.SetLineThickness(1);
    debugDraw.SetFlags(Box2D.Dynamics.b2DebugDraw.e_shapeBit || Box2D.Dynamics.b2DebugDraw.e_jointBit);
    this.world.SetDebugDraw(debugDraw);
  }

  Level.prototype.addObject = function(object) {
    if (object.children != null) {
      return this.objects.add(object);
    }
  };

  Level.prototype.process = function() {
    this.objects.setX(this.objects.getX() - 5);
    this.layer1.setX(this.layer1.getX() - 5);
    this.layer2.setX(this.layer2.getX() - 2.5);
    return this.layer3.setX(this.layer3.getX() - 1.25);
  };

  return Level;

})(Kinetic.Group);
