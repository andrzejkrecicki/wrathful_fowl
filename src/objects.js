// Generated by CoffeeScript 1.9.1
var Objects,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Objects = {};

Objects.GameObject = (function(superClass) {
  extend(GameObject, superClass);

  function GameObject(world, x, y, bodyDef, shape, density, friction, restitution) {
    var body, fixture, fixtureDef;
    if (density == null) {
      density = 1;
    }
    if (friction == null) {
      friction = .5;
    }
    if (restitution == null) {
      restitution = .3;
    }
    GameObject.__super__.constructor.call(this, {
      x: x,
      y: y
    });
    fixtureDef = new Box2D.Dynamics.b2FixtureDef;
    fixtureDef.density = density;
    fixtureDef.friction = friction;
    fixtureDef.restitution = restitution;
    fixtureDef.shape = shape;
    body = world.CreateBody(bodyDef);
    fixture = body.CreateFixture(fixtureDef);
  }

  return GameObject;

})(Kinetic.Group);

Objects.Slingshot = (function(superClass) {
  extend(Slingshot, superClass);

  function Slingshot(world, x, y) {
    var bodyDef, shape;
    shape = new Box2D.Collision.Shapes.b2PolygonShape;
    shape.SetAsBox(17 / 2 / world.scale, 41 / 2 / world.scale);
    bodyDef = new Box2D.Dynamics.b2BodyDef;
    bodyDef.type = Box2D.Dynamics.b2Body.b2_dynamicBody;
    bodyDef.position.x = (x + 42) / world.scale;
    bodyDef.position.y = (y + 58) / world.scale;
    Slingshot.__super__.constructor.call(this, world, x, y, bodyDef, shape);
    this.add(new Kinetic.Image({
      image: Utils.ImageResource(DefaultLoader.resources.level1.images.slingshot, function() {
        return 0;
      }),
      x: 0,
      y: 0,
      width: 80,
      height: 80
    }));
  }

  return Slingshot;

})(Objects.GameObject);

Objects.Floor = (function() {
  function Floor(world, x, y) {
    var body, bodyDef, fixture, fixtureDef;
    if (x == null) {
      x = 1500;
    }
    if (y == null) {
      y = 700;
    }
    bodyDef = new Box2D.Dynamics.b2BodyDef;
    bodyDef.type = Box2D.Dynamics.b2Body.b2_staticBody;
    bodyDef.position.x = x / world.scale;
    bodyDef.position.y = y / world.scale;
    fixtureDef = new Box2D.Dynamics.b2FixtureDef;
    fixtureDef.density = 1;
    fixtureDef.friction = .5;
    fixtureDef.restitution = .2;
    fixtureDef.shape = new Box2D.Collision.Shapes.b2PolygonShape;
    fixtureDef.shape.SetAsBox(3000 / world.scale, 10 / world.scale);
    body = world.CreateBody(bodyDef);
    fixture = body.CreateFixture(fixtureDef);
  }

  return Floor;

})();
